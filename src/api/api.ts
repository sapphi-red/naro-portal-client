// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * rettiwt
 * yet another twitter
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     * 
     * @type {string}
     * @memberof AuthUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AuthUser
     */
    password: string;
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    content?: number;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    desc: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    createdUser: string;
    /**
     * 
     * @type {Date}
     * @memberof Post
     */
    createdDate?: Date;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name: string;
}


/**
 * AuthsApi - axios parameter creator
 * @export
 */
export const AuthsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザーのログインをします
         * @param {AuthUser} [authUser] 登録するユーザー情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authUser?: AuthUser, options: any = {}): RequestArgs {
            const localVarPath = `/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AuthUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authUser !== undefined ? authUser : {}) : (authUser || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのログアウトをします
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options: any = {}): RequestArgs {
            const localVarPath = `/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの登録をします
         * @param {AuthUser} [authUser] 登録するユーザー情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(authUser?: AuthUser, options: any = {}): RequestArgs {
            const localVarPath = `/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AuthUser" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authUser !== undefined ? authUser : {}) : (authUser || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのログイン状態を確認します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options: any = {}): RequestArgs {
            const localVarPath = `/whoami`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthsApi - functional programming interface
 * @export
 */
export const AuthsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ユーザーのログインをします
         * @param {AuthUser} [authUser] 登録するユーザー情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authUser?: AuthUser, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AuthsApiAxiosParamCreator(configuration).login(authUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーのログアウトをします
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AuthsApiAxiosParamCreator(configuration).logout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーの登録をします
         * @param {AuthUser} [authUser] 登録するユーザー情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(authUser?: AuthUser, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AuthsApiAxiosParamCreator(configuration).signup(authUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーのログイン状態を確認します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AuthsApiAxiosParamCreator(configuration).whoami(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthsApi - factory interface
 * @export
 */
export const AuthsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ユーザーのログインをします
         * @param {AuthUser} [authUser] 登録するユーザー情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authUser?: AuthUser, options?: any) {
            return AuthsApiFp(configuration).login(authUser, options)(axios, basePath);
        },
        /**
         * ユーザーのログアウトをします
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any) {
            return AuthsApiFp(configuration).logout(options)(axios, basePath);
        },
        /**
         * ユーザーの登録をします
         * @param {AuthUser} [authUser] 登録するユーザー情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(authUser?: AuthUser, options?: any) {
            return AuthsApiFp(configuration).signup(authUser, options)(axios, basePath);
        },
        /**
         * ユーザーのログイン状態を確認します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options?: any) {
            return AuthsApiFp(configuration).whoami(options)(axios, basePath);
        },
    };
};

/**
 * AuthsApi - object-oriented interface
 * @export
 * @class AuthsApi
 * @extends {BaseAPI}
 */
export class AuthsApi extends BaseAPI {
    /**
     * ユーザーのログインをします
     * @param {AuthUser} [authUser] 登録するユーザー情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthsApi
     */
    public login(authUser?: AuthUser, options?: any) {
        return AuthsApiFp(this.configuration).login(authUser, options)(this.axios, this.basePath);
    }

    /**
     * ユーザーのログアウトをします
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthsApi
     */
    public logout(options?: any) {
        return AuthsApiFp(this.configuration).logout(options)(this.axios, this.basePath);
    }

    /**
     * ユーザーの登録をします
     * @param {AuthUser} [authUser] 登録するユーザー情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthsApi
     */
    public signup(authUser?: AuthUser, options?: any) {
        return AuthsApiFp(this.configuration).signup(authUser, options)(this.axios, this.basePath);
    }

    /**
     * ユーザーのログイン状態を確認します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthsApi
     */
    public whoami(options?: any) {
        return AuthsApiFp(this.configuration).whoami(options)(this.axios, this.basePath);
    }

}


/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 投稿を追加する
         * @param {Post} [post] 投稿内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(post?: Post, options: any = {}): RequestArgs {
            const localVarPath = `/posts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Post" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(post !== undefined ? post : {}) : (post || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 投稿一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(options: any = {}): RequestArgs {
            const localVarPath = `/posts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 投稿を追加する
         * @param {Post} [post] 投稿内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(post?: Post, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).createPost(post, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 投稿一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>> {
            const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).getPosts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 投稿を追加する
         * @param {Post} [post] 投稿内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(post?: Post, options?: any) {
            return PostsApiFp(configuration).createPost(post, options)(axios, basePath);
        },
        /**
         * 投稿一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(options?: any) {
            return PostsApiFp(configuration).getPosts(options)(axios, basePath);
        },
    };
};

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 投稿を追加する
     * @param {Post} [post] 投稿内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public createPost(post?: Post, options?: any) {
        return PostsApiFp(this.configuration).createPost(post, options)(this.axios, this.basePath);
    }

    /**
     * 投稿一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPosts(options?: any) {
        return PostsApiFp(this.configuration).getPosts(options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定したIDのユーザーの情報を取得する
         * @param {string} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 指定したIDのユーザーの情報を取得する
         * @param {string} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).getUser(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 指定したIDのユーザーの情報を取得する
         * @param {string} id ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any) {
            return UsersApiFp(configuration).getUser(id, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 指定したIDのユーザーの情報を取得する
     * @param {string} id ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(id: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(id, options)(this.axios, this.basePath);
    }

}


